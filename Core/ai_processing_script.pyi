# This file was generated by Nuitka

# Stubs included by default
from __future__ import annotations
from pathlib import Path
from tqdm import tqdm
from typing import Any, Dict, Generator, List, Optional, Tuple
from typing_extensions import Self
from ultralytics import YOLO
import cv2
import json
import numpy

def apply_clahe_grayscale(img: np.ndarray, clip_limit: float, tile_grid_size: tuple) -> np.ndarray:
    ...

class AIImageProcessor:
    def __init__(self: Self, model_path: str, output_folder: str, device: str, batch_size: int, slice_height: int, slice_width: int) -> None: ...
    def _load_model(self: Self, model_path: str) -> YOLO: ...
    def _create_slices_from_image(self: Self, large_image: np.ndarray) -> Generator[Tuple[np.ndarray, Tuple[int, int], Tuple[int, int]], None, None]: ...
    @staticmethod
    def _simplify_mask_to_polygon(mask_np: np.ndarray, tolerance: float) -> List[List[int]]: ...
    @staticmethod
    def _calculate_direction(mask_tensor: np.ndarray, image_shape: tuple, box_coords: list) -> Optional[str]: ...
    def _process_single_result(self: Self, result: Any, slice_index: Tuple[int, int], slice_origin: Tuple[int, int]) -> List[Dict[str, Any]]: ...
    def run_analysis(self: Self, image_dir: str) -> Any: ...
    def _save_to_json(self: Self, data: Dict) -> Any: ...


__name__ = ...



# Modules used internally, to allow implicit dependencies to be seen:
import cv2
import numpy
import json
import pathlib
import ultralytics
import ultralytics.YOLO
import typing
import tqdm
import tqdm.tqdm